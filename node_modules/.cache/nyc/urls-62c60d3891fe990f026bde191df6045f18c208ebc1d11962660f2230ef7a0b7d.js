function cov_19kzwhc92r(){var path="/Users/jeonhyeonseong/Documents/express-mysql-example/src/api/urls.js";var hash="66475658e7da84c9aa5947fc55e3d5d451588528";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/jeonhyeonseong/Documents/express-mysql-example/src/api/urls.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:18}},"1":{start:{line:2,column:16},end:{line:2,column:34}},"2":{start:{line:3,column:16},end:{line:3,column:42}},"3":{start:{line:9,column:4},end:{line:9,column:23}},"4":{start:{line:10,column:20},end:{line:10,column:45}},"5":{start:{line:46,column:13},end:{line:46,column:29}},"6":{start:{line:79,column:0},end:{line:92,column:3}},"7":{start:{line:80,column:19},end:{line:80,column:33}},"8":{start:{line:81,column:26},end:{line:81,column:83}},"9":{start:{line:82,column:23},end:{line:82,column:65}},"10":{start:{line:84,column:17},end:{line:84,column:64}},"11":{start:{line:86,column:2},end:{line:91,column:3}},"12":{start:{line:87,column:4},end:{line:87,column:79}},"13":{start:{line:89,column:4},end:{line:89,column:55}},"14":{start:{line:90,column:4},end:{line:90,column:37}},"15":{start:{line:143,column:0},end:{line:172,column:3}},"16":{start:{line:144,column:20},end:{line:144,column:32}},"17":{start:{line:145,column:20},end:{line:145,column:76}},"18":{start:{line:147,column:2},end:{line:149,column:3}},"19":{start:{line:148,column:4},end:{line:148,column:75}},"20":{start:{line:151,column:2},end:{line:159,column:3}},"21":{start:{line:152,column:4},end:{line:158,column:6}},"22":{start:{line:161,column:17},end:{line:161,column:48}},"23":{start:{line:162,column:2},end:{line:166,column:3}},"24":{start:{line:163,column:4},end:{line:165,column:6}},"25":{start:{line:168,column:2},end:{line:168,column:49}},"26":{start:{line:169,column:2},end:{line:171,column:5}},"27":{start:{line:220,column:0},end:{line:240,column:3}},"28":{start:{line:221,column:19},end:{line:221,column:33}},"29":{start:{line:222,column:24},end:{line:223,column:56}},"30":{start:{line:224,column:24},end:{line:224,column:73}},"31":{start:{line:226,column:24},end:{line:226,column:69}},"32":{start:{line:227,column:2},end:{line:229,column:3}},"33":{start:{line:228,column:4},end:{line:228,column:79}},"34":{start:{line:231,column:47},end:{line:231,column:61}},"35":{start:{line:232,column:20},end:{line:232,column:63}},"36":{start:{line:233,column:2},end:{line:239,column:5}},"37":{start:{line:238,column:37},end:{line:238,column:51}},"38":{start:{line:242,column:0},end:{line:242,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:79,column:18},end:{line:79,column:19}},loc:{start:{line:79,column:44},end:{line:92,column:1}},line:79},"1":{name:"(anonymous_1)",decl:{start:{line:143,column:30},end:{line:143,column:31}},loc:{start:{line:143,column:56},end:{line:172,column:1}},line:143},"2":{name:"(anonymous_2)",decl:{start:{line:220,column:23},end:{line:220,column:24}},loc:{start:{line:220,column:49},end:{line:240,column:1}},line:220},"3":{name:"(anonymous_3)",decl:{start:{line:238,column:27},end:{line:238,column:28}},loc:{start:{line:238,column:37},end:{line:238,column:51}},line:238}},branchMap:{"0":{loc:{start:{line:86,column:2},end:{line:91,column:3}},type:"if",locations:[{start:{line:86,column:2},end:{line:91,column:3}},{start:{line:86,column:2},end:{line:91,column:3}}],line:86},"1":{loc:{start:{line:147,column:2},end:{line:149,column:3}},type:"if",locations:[{start:{line:147,column:2},end:{line:149,column:3}},{start:{line:147,column:2},end:{line:149,column:3}}],line:147},"2":{loc:{start:{line:151,column:2},end:{line:159,column:3}},type:"if",locations:[{start:{line:151,column:2},end:{line:159,column:3}},{start:{line:151,column:2},end:{line:159,column:3}}],line:151},"3":{loc:{start:{line:162,column:2},end:{line:166,column:3}},type:"if",locations:[{start:{line:162,column:2},end:{line:166,column:3}},{start:{line:162,column:2},end:{line:166,column:3}}],line:162},"4":{loc:{start:{line:227,column:2},end:{line:229,column:3}},type:"if",locations:[{start:{line:227,column:2},end:{line:229,column:3}},{start:{line:227,column:2},end:{line:229,column:3}}],line:227}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"66475658e7da84c9aa5947fc55e3d5d451588528"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_19kzwhc92r=function(){return actualCoverage;};}return actualCoverage;}cov_19kzwhc92r();cov_19kzwhc92r().s[0]++;require("../env");const express=(cov_19kzwhc92r().s[1]++,require("express"));const timeout=(cov_19kzwhc92r().s[2]++,require("connect-timeout"));const{isValidUrl,isEmptyResult,checkUrlLength,getUniqueUrlKey}=(cov_19kzwhc92r().s[3]++,require("../utils"));const CustomError=(cov_19kzwhc92r().s[4]++,require("../customError"));/**
 * @swagger
 * tags:
 *  name: URL
 * definitions:
 *  urls:
 *        type: object
 *        properties:
 *            url_id:
 *                    type: number
 *                    description: url 번호
 *            origin_url:
 *                    type: string
 *                    description: 단축 전 url
 *            short_key:
 *                    type: string
 *                    description: 원래 url에 접근하기 위한 key (단축된 url)
 *            created_date:
 *                    type: date
 *                    description: 단축 URL이 생긴 시간.
 *  url_logs:
 *        type: object
 *        properties:
 *            id:
 *                    type: number
 *                    description: log의 id
 *            url_id:
 *                    type: number
 *                    description: 호출된 url의 id
 *            call_date:
 *                    type: date
 *                    description: 호출된 시간
 */const urls=(cov_19kzwhc92r().s[5]++,express.Router());/**
 * @swagger
 * /urls/{key}:
 *  get:
 *      tags: [URL]
 *      summary: 단축된 URL 링크에서 원래 URL로 리다이렉트
 *      parameters:
 *          - in: path
 *            type: string
 *            required: true
 *            default: 57Z4W
 *            name: key
 *            description: 단축된 URL 키 값
 *      responses:
 *          200:
 *              description: 리다이렉트 성공
 *              schema:
 *                  type: string
 *                  example: Redirect to "https://www.google.co.kr/"
 *          404:
 *              description: 존재하지 않는 URL 키 값으로 시도한 경우
 *              schema:
 *                  type: object
 *                  properties:
 *                       error:
 *                          type: string
 *                          example: NO_RESULT
 *                       message:
 *                          type: string
 *                          example: This url does not exist.
 */cov_19kzwhc92r().s[6]++;urls.get("/:key",async(req,res,next)=>{cov_19kzwhc92r().f[0]++;const shortKey=(cov_19kzwhc92r().s[7]++,req.params.key);const getOriginUrlSql=(cov_19kzwhc92r().s[8]++,`SELECT url_id, origin_url from urls WHERE short_key = ?`);const createLogSql=(cov_19kzwhc92r().s[9]++,`INSERT INTO url_logs (url_id) VALUES (?)`);const[rows]=(cov_19kzwhc92r().s[10]++,await res.conn.query(getOriginUrlSql,shortKey));cov_19kzwhc92r().s[11]++;if(isEmptyResult(rows)){cov_19kzwhc92r().b[0][0]++;cov_19kzwhc92r().s[12]++;return next(new CustomError("NO_RESULT",404,"This url does not exist."));}else{cov_19kzwhc92r().b[0][1]++;cov_19kzwhc92r().s[13]++;await res.conn.query(createLogSql,rows[0].url_id);cov_19kzwhc92r().s[14]++;res.redirect(rows[0].origin_url);}});/**
 * @swagger
 * /urls:
 *  post:
 *      tags: [URL]
 *      summary: URL 단축
 *      parameters:
 *          - in: body
 *            name: url
 *            schema:
 *                type: object
 *                required:
 *                  - url
 *                properties:
 *                      url:
 *                          type: string
 *                          example: https://www.naver.com/
 *      responses:
 *          200:
 *              description: URL 등록 및 단축 URL 응답 성공
 *              schema:
 *                  type: object
 *                  properties:
 *                       short_url:
 *                          type: number
 *                          example: https://{domainName}/{newKey}
 *          400:
 *              description: URL 패턴에 맞지 않는 값을 입력했을 때 / URL 길이 제한을 초과했을 때 (500자)
 *              schema:
 *                  type: object
 *                  properties:
 *                       error:
 *                          type: string
 *                          example: WRONG_REQUEST
 *                       message:
 *                          type: string
 *                          example: This is not url. / The url is too long. (over 500 in length)
 *          500:
 *              description: 단축 Key 생성에 실패 했을 경우
 *              schema:
 *                  type: object
 *                  properties:
 *                       error:
 *                          type: string
 *                          example: GENERIC
 *                       message:
 *                          type: string
 *                          example: Couldn't get unique url key.
 */cov_19kzwhc92r().s[15]++;urls.post("/",timeout(3000),async(req,res,next)=>{cov_19kzwhc92r().f[1]++;const originUrl=(cov_19kzwhc92r().s[16]++,req.body.url);const insertSql=(cov_19kzwhc92r().s[17]++,"INSERT INTO urls (origin_url, short_key) VALUES (?, ?)");cov_19kzwhc92r().s[18]++;if(!isValidUrl(originUrl)){cov_19kzwhc92r().b[1][0]++;cov_19kzwhc92r().s[19]++;return next(new CustomError("WRONG_REQUEST",400,"This is not url."));}else{cov_19kzwhc92r().b[1][1]++;}cov_19kzwhc92r().s[20]++;if(!checkUrlLength(originUrl)){cov_19kzwhc92r().b[2][0]++;cov_19kzwhc92r().s[21]++;return next(new CustomError("WRONG_REQUEST",400,"The url is too long. (over 500 in length)"));}else{cov_19kzwhc92r().b[2][1]++;}const newKey=(cov_19kzwhc92r().s[22]++,await getUniqueUrlKey(res.conn));cov_19kzwhc92r().s[23]++;if(newKey===""){cov_19kzwhc92r().b[3][0]++;cov_19kzwhc92r().s[24]++;return next(new CustomError("GENERIC",500,"Couldn't get unique url key."));}else{cov_19kzwhc92r().b[3][1]++;}cov_19kzwhc92r().s[25]++;res.conn.query(insertSql,[originUrl,newKey]);cov_19kzwhc92r().s[26]++;res.status(200).json({short_url:`${process.env.DOMAIN_NAME}:${process.env.PORT}/${newKey}`});});/**
 * @swagger
 * /urls/{key}/stat:
 *  get:
 *      tags: [URL]
 *      summary: 단축된 URL 링크 관련 통계 정보
 *      parameters:
 *          - in: path
 *            type: string
 *            required: true
 *            default: 57Z4W
 *            name: key
 *            description: 단축된 URL 키 값
 *      responses:
 *          200:
 *              description: 통계 정보 조회 성공
 *              schema:
 *                  type: object
 *                  properties:
 *                       origin_url:
 *                          type: string
 *                          example: https://google.com
 *                       created_date:
 *                          type: date
 *                          example: 2020-09-06T10:39:29.000Z
 *                       short_url:
 *                          type: string
 *                          example: domain-name/urls/1CiFQ9
 *                       call_count:
 *                          type: number
 *                          example: 2
 *                       call_logs:
 *                          type: list
 *                          example: [2020-09-06T10:39:29.000Z, 2020-09-06T10:39:39.000Z, 2020-09-06T10:39:40.000Z]
 *          404:
 *              description: 존재하지 않는 URL 키 값으로 시도한 경우
 *              schema:
 *                  type: object
 *                  properties:
 *                       error:
 *                          type: string
 *                          example: NO_RESULT
 *                       message:
 *                          type: string
 *                          example: This url does not exist.
 */cov_19kzwhc92r().s[27]++;urls.get("/:key/stat",async(req,res,next)=>{cov_19kzwhc92r().f[2]++;const shortKey=(cov_19kzwhc92r().s[28]++,req.params.key);const getUrlInfoSql=(cov_19kzwhc92r().s[29]++,`SELECT url_id, origin_url, created_date 
                          FROM urls WHERE short_key = ?`);const getUrlLogsSql=(cov_19kzwhc92r().s[30]++,`SELECT call_date FROM url_logs WHERE url_id = ?`);const[urlInfoRows]=(cov_19kzwhc92r().s[31]++,await res.conn.query(getUrlInfoSql,shortKey));cov_19kzwhc92r().s[32]++;if(isEmptyResult(urlInfoRows)){cov_19kzwhc92r().b[4][0]++;cov_19kzwhc92r().s[33]++;return next(new CustomError("NO_RESULT",404,"This url does not exist."));}else{cov_19kzwhc92r().b[4][1]++;}const{url_id,origin_url,created_date}=(cov_19kzwhc92r().s[34]++,urlInfoRows[0]);const[logRows]=(cov_19kzwhc92r().s[35]++,await res.conn.query(getUrlLogsSql,url_id));cov_19kzwhc92r().s[36]++;res.status(200).json({origin_url,created_date,short_url:`${process.env.DOMAIN_NAME}:${process.env.PORT}/${shortKey}`,call_count:logRows.length,call_logs:logRows.map(item=>{cov_19kzwhc92r().f[3]++;cov_19kzwhc92r().s[37]++;return item.call_date;})});});cov_19kzwhc92r().s[38]++;module.exports=urls;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVybHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImV4cHJlc3MiLCJ0aW1lb3V0IiwiaXNWYWxpZFVybCIsImlzRW1wdHlSZXN1bHQiLCJjaGVja1VybExlbmd0aCIsImdldFVuaXF1ZVVybEtleSIsIkN1c3RvbUVycm9yIiwidXJscyIsIlJvdXRlciIsImdldCIsInJlcSIsInJlcyIsIm5leHQiLCJzaG9ydEtleSIsInBhcmFtcyIsImtleSIsImdldE9yaWdpblVybFNxbCIsImNyZWF0ZUxvZ1NxbCIsInJvd3MiLCJjb25uIiwicXVlcnkiLCJ1cmxfaWQiLCJyZWRpcmVjdCIsIm9yaWdpbl91cmwiLCJwb3N0Iiwib3JpZ2luVXJsIiwiYm9keSIsInVybCIsImluc2VydFNxbCIsIm5ld0tleSIsInN0YXR1cyIsImpzb24iLCJzaG9ydF91cmwiLCJwcm9jZXNzIiwiZW52IiwiRE9NQUlOX05BTUUiLCJQT1JUIiwiZ2V0VXJsSW5mb1NxbCIsImdldFVybExvZ3NTcWwiLCJ1cmxJbmZvUm93cyIsImNyZWF0ZWRfZGF0ZSIsImxvZ1Jvd3MiLCJjYWxsX2NvdW50IiwibGVuZ3RoIiwiY2FsbF9sb2dzIiwibWFwIiwiaXRlbSIsImNhbGxfZGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiIrcEpBZVk7bUhBZlpBLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FDQSxLQUFNQyxDQUFBQSxPQUFPLDBCQUFHRCxPQUFPLENBQUMsU0FBRCxDQUFWLENBQWIsQ0FDQSxLQUFNRSxDQUFBQSxPQUFPLDBCQUFHRixPQUFPLENBQUMsaUJBQUQsQ0FBVixDQUFiLENBQ0EsS0FBTSxDQUNKRyxVQURJLENBRUpDLGFBRkksQ0FHSkMsY0FISSxDQUlKQyxlQUpJLDJCQUtGTixPQUFPLENBQUMsVUFBRCxDQUxMLENBQU4sQ0FNQSxLQUFNTyxDQUFBQSxXQUFXLDBCQUFHUCxPQUFPLENBQUMsZ0JBQUQsQ0FBVixDQUFqQixDQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QUFSLENBQVlFLElBQUssSUFBR3ZCLFFBQVMsRUFIbkQsQ0FJbkI2QixVQUFVLENBQUVELE9BQU8sQ0FBQ0UsTUFKRCxDQUtuQkMsU0FBUyxDQUFFSCxPQUFPLENBQUNJLEdBQVIsQ0FBYUMsSUFBRCxFQUFVLHdEQUFBQSxDQUFBQSxJQUFJLENBQUNDLFNBQUwsQ0FBYyxDQUFwQyxDQUxRLENBQXJCLEVBT0QsQ0FwQkQsRSx5QkFzQkFDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQjFDLElBQWpCIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcIi4uL2VudlwiKTtcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbmNvbnN0IHRpbWVvdXQgPSByZXF1aXJlKFwiY29ubmVjdC10aW1lb3V0XCIpO1xuY29uc3Qge1xuICBpc1ZhbGlkVXJsLFxuICBpc0VtcHR5UmVzdWx0LFxuICBjaGVja1VybExlbmd0aCxcbiAgZ2V0VW5pcXVlVXJsS2V5LFxufSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IEN1c3RvbUVycm9yID0gcmVxdWlyZShcIi4uL2N1c3RvbUVycm9yXCIpO1xuXG4vKipcbiAqIEBzd2FnZ2VyXG4gKiB0YWdzOlxuICogIG5hbWU6IFVSTFxuICogZGVmaW5pdGlvbnM6XG4gKiAgdXJsczpcbiAqICAgICAgICB0eXBlOiBvYmplY3RcbiAqICAgICAgICBwcm9wZXJ0aWVzOlxuICogICAgICAgICAgICB1cmxfaWQ6XG4gKiAgICAgICAgICAgICAgICAgICAgdHlwZTogbnVtYmVyXG4gKiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHVybCDrsojtmLhcbiAqICAgICAgICAgICAgb3JpZ2luX3VybDpcbiAqICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjog64uo7LaVIOyghCB1cmxcbiAqICAgICAgICAgICAgc2hvcnRfa2V5OlxuICogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiDsm5DrnpggdXJs7JeQIOygkeq3vO2VmOq4sCDsnITtlZwga2V5ICjri6jstpXrkJwgdXJsKVxuICogICAgICAgICAgICBjcmVhdGVkX2RhdGU6XG4gKiAgICAgICAgICAgICAgICAgICAgdHlwZTogZGF0ZVxuICogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiDri6jstpUgVVJM7J20IOyDneq4tCDsi5zqsIQuXG4gKiAgdXJsX2xvZ3M6XG4gKiAgICAgICAgdHlwZTogb2JqZWN0XG4gKiAgICAgICAgcHJvcGVydGllczpcbiAqICAgICAgICAgICAgaWQ6XG4gKiAgICAgICAgICAgICAgICAgICAgdHlwZTogbnVtYmVyXG4gKiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGxvZ+ydmCBpZFxuICogICAgICAgICAgICB1cmxfaWQ6XG4gKiAgICAgICAgICAgICAgICAgICAgdHlwZTogbnVtYmVyXG4gKiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IO2YuOy2nOuQnCB1cmzsnZggaWRcbiAqICAgICAgICAgICAgY2FsbF9kYXRlOlxuICogICAgICAgICAgICAgICAgICAgIHR5cGU6IGRhdGVcbiAqICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjog7Zi47Lac65CcIOyLnOqwhFxuICovXG5cbmNvbnN0IHVybHMgPSBleHByZXNzLlJvdXRlcigpO1xuXG4vKipcbiAqIEBzd2FnZ2VyXG4gKiAvdXJscy97a2V5fTpcbiAqICBnZXQ6XG4gKiAgICAgIHRhZ3M6IFtVUkxdXG4gKiAgICAgIHN1bW1hcnk6IOuLqOy2leuQnCBVUkwg66eB7YGs7JeQ7IScIOybkOuemCBVUkzroZwg66as64uk7J2066CJ7Yq4XG4gKiAgICAgIHBhcmFtZXRlcnM6XG4gKiAgICAgICAgICAtIGluOiBwYXRoXG4gKiAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICogICAgICAgICAgICBkZWZhdWx0OiA1N1o0V1xuICogICAgICAgICAgICBuYW1lOiBrZXlcbiAqICAgICAgICAgICAgZGVzY3JpcHRpb246IOuLqOy2leuQnCBVUkwg7YKkIOqwklxuICogICAgICByZXNwb25zZXM6XG4gKiAgICAgICAgICAyMDA6XG4gKiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IOumrOuLpOydtOugie2KuCDshLHqs7VcbiAqICAgICAgICAgICAgICBzY2hlbWE6XG4gKiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgICAgICAgICBleGFtcGxlOiBSZWRpcmVjdCB0byBcImh0dHBzOi8vd3d3Lmdvb2dsZS5jby5rci9cIlxuICogICAgICAgICAgNDA0OlxuICogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiDsobTsnqztlZjsp4Ag7JWK64qUIFVSTCDtgqQg6rCS7Jy866GcIOyLnOuPhO2VnCDqsr3smrBcbiAqICAgICAgICAgICAgICBzY2hlbWE6XG4gKiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxuICogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxuICogICAgICAgICAgICAgICAgICAgICAgIGVycm9yOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IE5PX1JFU1VMVFxuICogICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogVGhpcyB1cmwgZG9lcyBub3QgZXhpc3QuXG4gKi9cbnVybHMuZ2V0KFwiLzprZXlcIiwgYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIGNvbnN0IHNob3J0S2V5ID0gcmVxLnBhcmFtcy5rZXk7XG4gIGNvbnN0IGdldE9yaWdpblVybFNxbCA9IGBTRUxFQ1QgdXJsX2lkLCBvcmlnaW5fdXJsIGZyb20gdXJscyBXSEVSRSBzaG9ydF9rZXkgPSA/YDtcbiAgY29uc3QgY3JlYXRlTG9nU3FsID0gYElOU0VSVCBJTlRPIHVybF9sb2dzICh1cmxfaWQpIFZBTFVFUyAoPylgO1xuXG4gIGNvbnN0IFtyb3dzXSA9IGF3YWl0IHJlcy5jb25uLnF1ZXJ5KGdldE9yaWdpblVybFNxbCwgc2hvcnRLZXkpO1xuXG4gIGlmIChpc0VtcHR5UmVzdWx0KHJvd3MpKSB7XG4gICAgcmV0dXJuIG5leHQobmV3IEN1c3RvbUVycm9yKFwiTk9fUkVTVUxUXCIsIDQwNCwgXCJUaGlzIHVybCBkb2VzIG5vdCBleGlzdC5cIikpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IHJlcy5jb25uLnF1ZXJ5KGNyZWF0ZUxvZ1NxbCwgcm93c1swXS51cmxfaWQpO1xuICAgIHJlcy5yZWRpcmVjdChyb3dzWzBdLm9yaWdpbl91cmwpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAc3dhZ2dlclxuICogL3VybHM6XG4gKiAgcG9zdDpcbiAqICAgICAgdGFnczogW1VSTF1cbiAqICAgICAgc3VtbWFyeTogVVJMIOuLqOy2lVxuICogICAgICBwYXJhbWV0ZXJzOlxuICogICAgICAgICAgLSBpbjogYm9keVxuICogICAgICAgICAgICBuYW1lOiB1cmxcbiAqICAgICAgICAgICAgc2NoZW1hOlxuICogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XG4gKiAgICAgICAgICAgICAgICByZXF1aXJlZDpcbiAqICAgICAgICAgICAgICAgICAgLSB1cmxcbiAqICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6XG4gKiAgICAgICAgICAgICAgICAgICAgICB1cmw6XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogaHR0cHM6Ly93d3cubmF2ZXIuY29tL1xuICogICAgICByZXNwb25zZXM6XG4gKiAgICAgICAgICAyMDA6XG4gKiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFVSTCDrk7HroZ0g67CPIOuLqOy2lSBVUkwg7J2R64u1IOyEseqztVxuICogICAgICAgICAgICAgIHNjaGVtYTpcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6XG4gKiAgICAgICAgICAgICAgICAgICAgICAgc2hvcnRfdXJsOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG51bWJlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IGh0dHBzOi8ve2RvbWFpbk5hbWV9L3tuZXdLZXl9XG4gKiAgICAgICAgICA0MDA6XG4gKiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFVSTCDtjKjthLTsl5Ag66ee7KeAIOyViuuKlCDqsJLsnYQg7J6F66Cl7ZaI7J2EIOuVjCAvIFVSTCDquLjsnbQg7KCc7ZWc7J2EIOy0iOqzvO2WiOydhCDrlYwgKDUwMOyekClcbiAqICAgICAgICAgICAgICBzY2hlbWE6XG4gKiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxuICogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxuICogICAgICAgICAgICAgICAgICAgICAgIGVycm9yOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IFdST05HX1JFUVVFU1RcbiAqICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IFRoaXMgaXMgbm90IHVybC4gLyBUaGUgdXJsIGlzIHRvbyBsb25nLiAob3ZlciA1MDAgaW4gbGVuZ3RoKVxuICogICAgICAgICAgNTAwOlxuICogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiDri6jstpUgS2V5IOyDneyEseyXkCDsi6TtjKgg7ZaI7J2EIOqyveyasFxuICogICAgICAgICAgICAgIHNjaGVtYTpcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6XG4gKiAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogR0VORVJJQ1xuICogICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogQ291bGRuJ3QgZ2V0IHVuaXF1ZSB1cmwga2V5LlxuICovXG51cmxzLnBvc3QoXCIvXCIsIHRpbWVvdXQoMzAwMCksIGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBjb25zdCBvcmlnaW5VcmwgPSByZXEuYm9keS51cmw7XG4gIGNvbnN0IGluc2VydFNxbCA9IFwiSU5TRVJUIElOVE8gdXJscyAob3JpZ2luX3VybCwgc2hvcnRfa2V5KSBWQUxVRVMgKD8sID8pXCI7XG5cbiAgaWYgKCFpc1ZhbGlkVXJsKG9yaWdpblVybCkpIHtcbiAgICByZXR1cm4gbmV4dChuZXcgQ3VzdG9tRXJyb3IoXCJXUk9OR19SRVFVRVNUXCIsIDQwMCwgXCJUaGlzIGlzIG5vdCB1cmwuXCIpKTtcbiAgfVxuXG4gIGlmICghY2hlY2tVcmxMZW5ndGgob3JpZ2luVXJsKSkge1xuICAgIHJldHVybiBuZXh0KFxuICAgICAgbmV3IEN1c3RvbUVycm9yKFxuICAgICAgICBcIldST05HX1JFUVVFU1RcIixcbiAgICAgICAgNDAwLFxuICAgICAgICBcIlRoZSB1cmwgaXMgdG9vIGxvbmcuIChvdmVyIDUwMCBpbiBsZW5ndGgpXCJcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgY29uc3QgbmV3S2V5ID0gYXdhaXQgZ2V0VW5pcXVlVXJsS2V5KHJlcy5jb25uKTtcbiAgaWYgKG5ld0tleSA9PT0gXCJcIikge1xuICAgIHJldHVybiBuZXh0KFxuICAgICAgbmV3IEN1c3RvbUVycm9yKFwiR0VORVJJQ1wiLCA1MDAsIFwiQ291bGRuJ3QgZ2V0IHVuaXF1ZSB1cmwga2V5LlwiKVxuICAgICk7XG4gIH1cblxuICByZXMuY29ubi5xdWVyeShpbnNlcnRTcWwsIFtvcmlnaW5VcmwsIG5ld0tleV0pO1xuICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgc2hvcnRfdXJsOiBgJHtwcm9jZXNzLmVudi5ET01BSU5fTkFNRX06JHtwcm9jZXNzLmVudi5QT1JUfS8ke25ld0tleX1gLFxuICB9KTtcbn0pO1xuXG4vKipcbiAqIEBzd2FnZ2VyXG4gKiAvdXJscy97a2V5fS9zdGF0OlxuICogIGdldDpcbiAqICAgICAgdGFnczogW1VSTF1cbiAqICAgICAgc3VtbWFyeTog64uo7LaV65CcIFVSTCDrp4Htgawg6rSA66CoIO2GteqzhCDsoJXrs7RcbiAqICAgICAgcGFyYW1ldGVyczpcbiAqICAgICAgICAgIC0gaW46IHBhdGhcbiAqICAgICAgICAgICAgdHlwZTogc3RyaW5nXG4gKiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gKiAgICAgICAgICAgIGRlZmF1bHQ6IDU3WjRXXG4gKiAgICAgICAgICAgIG5hbWU6IGtleVxuICogICAgICAgICAgICBkZXNjcmlwdGlvbjog64uo7LaV65CcIFVSTCDtgqQg6rCSXG4gKiAgICAgIHJlc3BvbnNlczpcbiAqICAgICAgICAgIDIwMDpcbiAqICAgICAgICAgICAgICBkZXNjcmlwdGlvbjog7Ya16rOEIOygleuztCDsobDtmowg7ISx6rO1XG4gKiAgICAgICAgICAgICAgc2NoZW1hOlxuICogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgcHJvcGVydGllczpcbiAqICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5fdXJsOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IGh0dHBzOi8vZ29vZ2xlLmNvbVxuICogICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRfZGF0ZTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBkYXRlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogMjAyMC0wOS0wNlQxMDozOToyOS4wMDBaXG4gKiAgICAgICAgICAgICAgICAgICAgICAgc2hvcnRfdXJsOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IGRvbWFpbi1uYW1lL3VybHMvMUNpRlE5XG4gKiAgICAgICAgICAgICAgICAgICAgICAgY2FsbF9jb3VudDpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBudW1iZXJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiAyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgY2FsbF9sb2dzOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGxpc3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiBbMjAyMC0wOS0wNlQxMDozOToyOS4wMDBaLCAyMDIwLTA5LTA2VDEwOjM5OjM5LjAwMFosIDIwMjAtMDktMDZUMTA6Mzk6NDAuMDAwWl1cbiAqICAgICAgICAgIDQwNDpcbiAqICAgICAgICAgICAgICBkZXNjcmlwdGlvbjog7KG07J6s7ZWY7KeAIOyViuuKlCBVUkwg7YKkIOqwkuycvOuhnCDsi5zrj4TtlZwg6rK97JqwXG4gKiAgICAgICAgICAgICAgc2NoZW1hOlxuICogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgcHJvcGVydGllczpcbiAqICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiBOT19SRVNVTFRcbiAqICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IFRoaXMgdXJsIGRvZXMgbm90IGV4aXN0LlxuICovXG51cmxzLmdldChcIi86a2V5L3N0YXRcIiwgYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIGNvbnN0IHNob3J0S2V5ID0gcmVxLnBhcmFtcy5rZXk7XG4gIGNvbnN0IGdldFVybEluZm9TcWwgPSBgU0VMRUNUIHVybF9pZCwgb3JpZ2luX3VybCwgY3JlYXRlZF9kYXRlIFxuICAgICAgICAgICAgICAgICAgICAgICAgICBGUk9NIHVybHMgV0hFUkUgc2hvcnRfa2V5ID0gP2A7XG4gIGNvbnN0IGdldFVybExvZ3NTcWwgPSBgU0VMRUNUIGNhbGxfZGF0ZSBGUk9NIHVybF9sb2dzIFdIRVJFIHVybF9pZCA9ID9gO1xuXG4gIGNvbnN0IFt1cmxJbmZvUm93c10gPSBhd2FpdCByZXMuY29ubi5xdWVyeShnZXRVcmxJbmZvU3FsLCBzaG9ydEtleSk7XG4gIGlmIChpc0VtcHR5UmVzdWx0KHVybEluZm9Sb3dzKSkge1xuICAgIHJldHVybiBuZXh0KG5ldyBDdXN0b21FcnJvcihcIk5PX1JFU1VMVFwiLCA0MDQsIFwiVGhpcyB1cmwgZG9lcyBub3QgZXhpc3QuXCIpKTtcbiAgfVxuXG4gIGNvbnN0IHsgdXJsX2lkLCBvcmlnaW5fdXJsLCBjcmVhdGVkX2RhdGUgfSA9IHVybEluZm9Sb3dzWzBdO1xuICBjb25zdCBbbG9nUm93c10gPSBhd2FpdCByZXMuY29ubi5xdWVyeShnZXRVcmxMb2dzU3FsLCB1cmxfaWQpO1xuICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgb3JpZ2luX3VybCxcbiAgICBjcmVhdGVkX2RhdGUsXG4gICAgc2hvcnRfdXJsOiBgJHtwcm9jZXNzLmVudi5ET01BSU5fTkFNRX06JHtwcm9jZXNzLmVudi5QT1JUfS8ke3Nob3J0S2V5fWAsXG4gICAgY2FsbF9jb3VudDogbG9nUm93cy5sZW5ndGgsXG4gICAgY2FsbF9sb2dzOiBsb2dSb3dzLm1hcCgoaXRlbSkgPT4gaXRlbS5jYWxsX2RhdGUpLFxuICB9KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVybHM7XG4iXX0=